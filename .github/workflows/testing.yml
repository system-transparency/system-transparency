---

name: Testing

on:
  - push

jobs:
  build-example-os:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go and debos dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install golang \
          debootstrap systemd-container libglib2.0-dev libostree-dev

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build example OS
        run: |
          . .envrc
          task demo:ubuntu

      - name: Upload example OS
        uses: actions/upload-artifact@v2
        with:
          name: example-os
          path: cache/debos

  # TODO: Use pre-build packages
  build-swtpm:
    runs-on: ubuntu-20.04
    steps:
      - name: Install build dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install curl gawk \
          automake autoconf libtool gcc build-essential libssl-dev dh-exec \
          pkg-config dh-autoreconf dpkg-dev debhelper net-tools libfuse-dev \
          libglib2.0-dev libgmp-dev expect libtasn1-dev socat python3-twisted \
          gnutls-dev gnutls-bin libjson-glib-dev python3-setuptools softhsm2 \
          libseccomp-dev gawk trousers

      - name: Build and install libtpms
        run: |
          curl -LO https://github.com/stefanberger/libtpms/archive/refs/tags/v0.9.0.tar.gz
          tar -xf v0.9.0.tar.gz
          cd libtpms-0.9.0
          dpkg-buildpackage -us -uc -j$(nproc) >/dev/null
          cd ..
          sudo dpkg -i *.deb

      - name: Build swtpm
        run: |
          curl -LO https://github.com/stefanberger/swtpm/archive/refs/tags/v0.6.1.tar.gz
          tar -xf v0.6.1.tar.gz
          cd swtpm-0.6.1
          dpkg-buildpackage -us -uc -j$(nproc) >/dev/null
          cd ..
          sudo dpkg -i *.deb

      - name: Upload swtpm debs
        uses: actions/upload-artifact@v2
        with:
          name: swtpm-debs
          path: '*.deb'
          retention-days: 1

  build-ubuntu20:
    runs-on: ubuntu-20.04
    needs: build-example-os
    steps:
      - name: Install Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
      - name: Install debos dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install \
          debootstrap systemd-container libglib2.0-dev libostree-dev

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          . .envrc
          task deps:install

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Generate example signing keys
        run: |
          . .envrc
          task demo:keygen

      - name: Download example OS
        uses: actions/download-artifact@v2
        with:
          name: example-os
          path: cache/debos

      - name: Generate and Sign OS Package
        run: |
          . .envrc
          task demo:ospkg

      - name: Upload example OS Package
        uses: actions/upload-artifact@v2
        with:
          name: ospkg
          path: out/ospkgs/*
          retention-days: 1

      - name: Set Boot Mode to network
        run: |
          sed -i '/^ST_BOOT_MODE=local/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=network/s/^#//g' st.config

      - name: Build network MBR bootloader installation
        run: |
          . .envrc
          task image-mbr

      - name: Build network EFI application installation
        run: |
          . .envrc
          task image-efi

      - name: Upload network installations
        uses: actions/upload-artifact@v2
        with:
          name: stboot_network_images
          path: out/stboot_*_installation.img
          retention-days: 1

      - name: Set Boot Mode to local
        run: |
          sed -i '/^ST_BOOT_MODE=network/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=local/s/^#//g' st.config

      - name: Build local MBR bootloader installation
        run: |
          . .envrc
          task image-mbr

      - name: Build local EFI application installation
        run: |
          . .envrc
          task image-efi

      - name: Upload local installations
        uses: actions/upload-artifact@v2
        with:
          name: stboot_local_images
          path: out/stboot_*_installation.img
          retention-days: 1

  run-network-mbr:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Set Boot Mode to network
        run: |
          sed -i '/^ST_BOOT_MODE=local/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=network/s/^#//g' st.config

      - name: Download network installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_network_images
          path: out

      - name: Download example OS Package
        uses: actions/download-artifact@v2
        with:
          name: ospkg
          path: out/ospkgs

      - name: Boot MBR bootloader installation using QEMU
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh mbr

  run-network-hybrid:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Set Boot Mode to network
        run: |
          sed -i '/^ST_BOOT_MODE=local/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=network/s/^#//g' st.config

      - name: Download network installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_network_images
          path: out

      - name: Download example OS Package
        uses: actions/download-artifact@v2
        with:
          name: ospkg
          path: out/ospkgs

      - name: Boot MBR bootloader installation using QEMU with EFI firmware
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh mbr efi

  run-network-efi:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Set Boot Mode to network
        run: |
          sed -i '/^ST_BOOT_MODE=local/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=network/s/^#//g' st.config

      - name: Download network installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_network_images
          path: out

      - name: Download example OS Package
        uses: actions/download-artifact@v2
        with:
          name: ospkg
          path: out/ospkgs

      - name: Boot EFI application installation using QEMU
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh efi

  run-local-mbr:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Download local installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_local_images
          path: out

      - name: Boot MBR bootloader installation using QEMU
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh mbr

  run-local-hybrid:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Download local installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_local_images
          path: out

      - name: Boot MBR bootloader installation using QEMU with EFI firmware
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh mbr efi

  run-local-efi:
    runs-on: ubuntu-20.04
    needs:
      - build-ubuntu20
      - build-swtpm
    steps:
      - name: Download swtpm debs
        uses: actions/download-artifact@v2
        with:
          name: swtpm-debs
          path: /tmp/swtpm

      - name: Install qemu and swtpm
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qqy install qemu-system-x86 /tmp/swtpm/*.deb
          rm -r /tmp/swtpm

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Download local installations
        uses: actions/download-artifact@v2
        with:
          name: stboot_local_images
          path: out

      - name: Boot EFI application installation using QEMU
        run: |
          . .envrc
          .github/workflows/scripts/test-qemu.sh efi


  build-ubuntu18:
    runs-on: ubuntu-18.04
    steps:
      - name: Install Go 1.16
        uses: actions/setup-go@v1
        with:
          go-version: 1.16

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          . .envrc
          task deps:install

      - name: Build default config
        run: |
          . .envrc
          task config

      - name: Generate example signing keys
        run: |
          . .envrc
          task demo:keygen

      - name: Set Boot Mode to network
        run: |
          sed -i '/^ST_BOOT_MODE=local/s/^/#/g' st.config
          sed -i '/^#ST_BOOT_MODE=network/s/^#//g' st.config

      - name: Build MBR bootloader installation without ospkg
        run: |
          . .envrc
          task image-mbr

      - name: Build EFI application installation without ospkg
        run: |
          . .envrc
          task image-efi
