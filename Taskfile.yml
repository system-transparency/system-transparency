version: '3'

vars:
  # Config file
  CONFIG: st.config
  # Build Targets
  ISO: out/stboot.iso
  PROVISO: out/prov.iso
  # Build Artifacts
  BOOT_PART: out/artifacts/boot_partition.vfat
  STBOOT_LINUX_IMAGE: out/artifacts/stboot.vmlinuz
  PROVISIONING_LINUX_IMAGE: out/artifacts/proviso.vmlinuz
  STBOOT_INITRAMFS: out/artifacts/stboot.cpio.gz
  PROVISIONING_INITRAMFS: out/artifacts/proviso.cpio.gz
  SECURITY_CONFIG: out/artifacts/security_configuration.json
  # task helper script
  CONFIG_HELPER: "CONFIG={{.CONFIG}} ./.task_config.sh"


dotenv:
  - "{{.CONFIG}}"

includes:
  demo: ./tasks/demo.yml
  deps: ./tasks/deps.yml
  go: ./tasks/go.yml
  linux: ./tasks/linux.yml
  stboot: ./tasks/stboot.yml
  qemu: ./tasks/qemu.yml

output: 'prefixed'

tasks:

  default:
    cmds:
      - task -l
    interactive: true

  fetch:
    desc: Fetch dependencies which require network access
    deps:
      - check-config
      - go:all
      - linux:fetch

  config:
    desc: Generate default configuration
    sources:
      - "{{.DEFAULT_CONFIG}}"
    generates:
      - "{{.CONFIG}}"
    cmds:
      - cmd: >-
             if [ -f {{.CONFIG}} ]; then
             echo Moving old config to {{.CONFIG}}.old;
             mv {{.CONFIG}} {{.CONFIG}}.old;
             fi
        silent: true
      - cp {{.DEFAULT_CONFIG}} {{.CONFIG}}
    vars:
      DEFAULT_CONFIG: contrib/default.config

  toolchain:
    desc: Build toolchain
    deps:
      - go:update

  iso:
    desc: Build stboot iso image
    deps:
      - check-config
      - check-iso
      - boot-part
    sources:
      - "{{.BOOT_PART}}"
    generates:
      - "{{.ISO}}"
    cmds:
      - "rm -rf cache/iso"
      - "mkdir -p cache/iso"
      - "cp {{.BOOT_PART}} cache/iso/boot_partition.vfat"
      - "xorriso -as mkisofs -R -f -e boot_partition.vfat -no-emul-boot -o {{.ISO}} cache/iso"
    run: once

  proviso:
    desc: Build provisioning iso image
    deps:
      - check-config
      - task: linux:kernel
        vars:
          IMAGE: "{{.PROVISIONING_LINUX_IMAGE}}"
          INITRAMFS: "{{.PROVISIONING_INITRAMFS}}"
          INITRAMFS_TARGET: "stboot:provisioning-initramfs"
    sources:
      - ./{{.PROVISIONING_LINUX_IMAGE}}
    generates:
      - ./{{.PROVISO}}
    cmds:
      - rm -rf {{.PROVISO_FAT}}
      - mkdir -p {{.ISO_DIR}}
      - mkfs.vfat -C -n PROVISO {{.PROVISO_FAT}} {{.BLOCKS}}
      - mmd -i {{.PROVISO_FAT}} ::/EFI
      - mmd -i {{.PROVISO_FAT}} ::/EFI/BOOT
      - mcopy -i {{.PROVISO_FAT}} {{.PROVISIONING_LINUX_IMAGE}} ::/EFI/BOOT/BOOTX64.EFI
      - xorriso -as mkisofs -R -f -e provision.fat -no-emul-boot -o {{.PROVISO}} {{.ISO_DIR}}
    vars:
      ISO_DIR: cache/proviso
      PROVISO_FAT: ./{{.ISO_DIR}}/provision.fat
      # TODO: Calculate size
      BLOCKS:
        sh: echo $((1<<16))

  boot-part:
    deps:
      - check-config
      - task: linux:kernel
        vars:
          IMAGE: "{{.STBOOT_LINUX_IMAGE}}"
          INITRAMFS: "{{.STBOOT_INITRAMFS}}"
          INITRAMFS_TARGET: "stboot:initramfs"
    sources:
      - "{{.STBOOT_LINUX_IMAGE}}"
      - "{{.ST_HOST_CONFIG_FILE}}"
    generates:
      - "{{.BOOT_PART}}"
    method: timestamp
    cmds:
      - "{{.BOOT_PART_SCRIPT}} {{.HOST_CONFIG_ARG}} --kernel {{.STBOOT_LINUX_IMAGE}} -o {{.BOOT_PART}}"
    status:
      - "{{.CONFIG_HELPER}} boot-part {{.DEPS}}"
      - "[ -f {{.BOOT_PART}} ]"
    run: once
    vars:
      BOOT_PART_SCRIPT: ./scripts/boot_partition.sh
      HOST_CONFIG_ARG:
        sh: >
          [ "{{.ST_HOST_CONFIG_MODE}}" != "legacy" ] ||
          echo "--host-config {{.ST_HOST_CONFIG_FILE}}"
      DEPS: >-
        ST_HOST_CONFIG_MODE


  security-config:
    deps:
      - check-config
    generates:
      - "{{.SECURITY_CONFIG}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.SECURITY_CONFIG}})
        silent: true
      - |-
        cat > "{{.SECURITY_CONFIG}}" <<EOL
        {
          "version":1,
          "min_valid_sigs_required": {{.ST_NUM_SIGNATURES}},
          "boot_mode": "{{.ST_BOOT_MODE}}"
        }
        EOL
    status:
      - "{{.CONFIG_HELPER}} security-config {{.DEPS}}"
      - "[ -f {{.SECURITY_CONFIG}} ]"
    run: once
    vars:
      DEPS: >-
        ST_NUM_SIGNATURES
        ST_BOOT_MODE


######## checks ########

  # TODO: add config file validation
  check-config:
    preconditions:
      - sh: '[ -f "{{.CONFIG}}" ]'
        msg: |-
          [ERROR] File "{{.CONFIG}}" missing
          Please provide a configuration file or run "task config"
    run: once

  check-iso:
    preconditions:
      - sh: '[ "{{.ST_BOOT_MODE}}" == "network" ]'
        msg: '[ERROR] ISO image does only support network boot mode'
    run: once

######## cleanup ########

  clean:
    desc: Remove all build artifacts
    cmds:
      - "rm -rf out"

  clean-toolchain:
    desc: Remove all go tools
    deps:
      - go:clean

  clean-all:
    desc: Remove all build artifacts, cache and config file
    deps:
      - clean
      - go:clean
    cmds:
      - "rm -rf cache"
      - "rm -rf .task"
      - "rm -f {{.CONFIG}}"
