version: '3'

vars:
  # Config file
  CONFIG: st.config
  # Build Targets
  ISO: out/stboot.iso
  IMAGE: out/stboot.img
  # Build Artifacts
  DATA_PART: out/artifacts/data_partition.ext4
  BOOT_PART: out/artifacts/boot_partition.vfat
  LINUXBOOT_IMAGE: out/artifacts/linuxboot.vmlinuz
  INITRAMFS_FILE: out/artifacts/initramfs-linuxboot.cpio.gz
  SECURITY_CONFIG: out/artifacts/security_configuration.json
  # cpu ssh keys
  CPUKEYS_DIR: out/keys/cpu_keys
  # task helper script
  CONFIG_HELPER: "CONFIG={{.CONFIG}} ./.task_config.sh"

dotenv:
  - "{{.CONFIG}}"

includes:
  demo: ./tasks/demo.yml
  deps: ./tasks/deps.yml
  go: ./tasks/go.yml
  linux: ./tasks/linux.yml
  stboot: ./tasks/stboot.yml
  qemu: ./tasks/qemu.yml

output: 'prefixed'

tasks:

  default:
    cmds:
      - task -l
    interactive: true

  images:
    desc: Build stboot images
    deps:
      - disk
      - iso
    run: once

  config:
    desc: Generate default configuration
    sources:
      - "{{.DEFAULT_CONFIG}}"
    generates:
      - "{{.CONFIG}}"
    cmds:
      - cmd: >-
             if [ -f {{.CONFIG}} ]; then
             echo Moving old config to {{.CONFIG}}.old;
             mv {{.CONFIG}} {{.CONFIG}}.old;
             fi
        silent: true
      - cp {{.DEFAULT_CONFIG}} {{.CONFIG}}
    vars:
      DEFAULT_CONFIG: contrib/default.config

  toolchain:
    desc: Build toolchain
    deps:
      - go:update

  iso:
    desc: Build stboot iso image
    deps:
      - check-config
      - check-iso
      - boot-part
    sources:
      - "{{.BOOT_PART}}"
    generates:
      - "{{.ISO}}"
    cmds:
      - "rm -rf cache/iso"
      - "mkdir -p cache/iso; {{.CMD_COPY_HOST_CONFIG}}"
      - "cp {{.BOOT_PART}} cache/iso/boot_partition.vfat"
      - "xorriso -as mkisofs -R -f -e boot_partition.vfat -no-emul-boot -o {{.ISO}} cache/iso"
    preconditions:
      - sh: >-
          [ "{{.ST_HOST_CONFIG_LOCATION}}" != "cdrom" ] ||
          [ -n "{{.ST_HOST_CONFIG_FILE}}" ]
        msg: |-
          [ERROR] Configuration ST_HOST_CONFIG_FILE not defined in {{.CONFIG}}.
      - sh: >-
          [ "{{.ST_HOST_CONFIG_LOCATION}}" != "cdrom" ] ||
          [ -f "{{.ST_HOST_CONFIG_FILE}}" ]
        msg: |-
          [ERROR] Host configuration file {{.ST_HOST_CONFIG_FILE}} missing.
    run: once
    vars:
      CMD_COPY_HOST_CONFIG:
        sh: |
          if [ "{{.ST_HOST_CONFIG_LOCATION}}" = "cdrom" ]; then
          echo "cp {{.ST_HOST_CONFIG_FILE}} cache/iso/host_configuration.json"
          fi

  disk:
    desc: Build stboot disk image
    deps:
      - check-config
      - check-disk
      - boot-part
      - data-part
    sources:
      - "{{.BOOT_PART}}"
      - "{{.DATA_PART}}"
    generates:
      - "{{.IMAGE}}"
    method: timestamp
    cmds:
      - "{{.IMAGE_SCRIPT}} --boot {{.BOOT_PART}} --data {{.DATA_PART}} --output {{.IMAGE}}"
    run: once
    vars:
      IMAGE_SCRIPT: ./scripts/image.sh

  boot-part:
    deps:
      - check-config
      - linux:kernel
    sources:
      - "{{.LINUXBOOT_IMAGE}}"
      - "{{.ST_HOST_CONFIG_FILE}}"
    generates:
      - "{{.BOOT_PART}}"
    method: timestamp
    cmds:
      - "{{.BOOT_PART_SCRIPT}} {{.HOST_CONFIG_ARG}} --kernel {{.LINUXBOOT_IMAGE}} -o {{.BOOT_PART}}"
    status:
      - "{{.CONFIG_HELPER}} boot-part {{.DEPS}}"
      - "[ -f {{.BOOT_PART}} ]"
    run: once
    vars:
      BOOT_PART_SCRIPT: ./scripts/boot_partition.sh
      HOST_CONFIG_ARG:
        sh: >
          [ "{{.ST_HOST_CONFIG_LOCATION}}" != "legacy" ] ||
          echo "--host-config {{.ST_HOST_CONFIG_FILE}}"
      DEPS: >-
        ST_HOST_CONFIG_LOCATION

  data-part:
    deps:
      - check-config
    sources:
      - "{{.CONFIG}}"
      - "{{.ST_LOCAL_OSPKG_DIR}}/**"
    generates:
      - "{{.DATA_PART}}"
    method: timestamp
    cmds:
      - "{{.DATA_PART_SCRIPT}} -o {{.DATA_PART}}"
    status:
      - "{{.CONFIG_HELPER}} data-part {{.DEPS}}"
      - "[ -f {{.DATA_PART}} ] && [ -z \"$(ls -A {{.ST_LOCAL_OSPKG_DIR}})\" ]"
    preconditions:
      - sh: '[ -z "$ST_BOOT_MODE" ] || [ "$ST_BOOT_MODE" != "local" ] || (find {{.ST_LOCAL_OSPKG_DIR}} -name \*.zip | read)'
        msg: |
          [ERROR] Path "{{.ST_LOCAL_OSPKG_DIR}}" does not contain any OS package, which is required in Local Boot Mode.
          Please provide an OS Package or run "task demo:ospkg" to generate an example OS Package
      - sh: '[ -z "$ST_BOOT_MODE" ] || [ "$ST_BOOT_MODE" != "local" ] || [ -f "{{.ST_LOCAL_OSPKG_DIR}}/boot_order" ]'
        msg: |
          [ERROR] Local Boot requires {{.ST_LOCAL_OSPKG_DIR}}/boot_order file
    run: once
    vars:
      DATA_PART_SCRIPT: ./scripts/data_partition.sh
      DEPS: >-
        ST_DATA_PARTITION_EXTRA_SPACE

  security-config:
    deps:
      - check-config
    generates:
      - "{{.SECURITY_CONFIG}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.SECURITY_CONFIG}})
        silent: true
      - |-
        cat > "{{.SECURITY_CONFIG}}" <<EOL
        {
          "version":1,
          "min_valid_sigs_required": {{.ST_NUM_SIGNATURES}},
          "boot_mode": "{{.ST_BOOT_MODE}}"
        }
        EOL
    status:
      - "{{.CONFIG_HELPER}} security-config {{.DEPS}}"
      - "[ -f {{.SECURITY_CONFIG}} ]"
    run: once
    vars:
      DEPS: >-
        ST_NUM_SIGNATURES
        ST_BOOT_MODE

  cpu-sshkeys:
    generates:
      - "{{.CPUKEYS_DIR}}/*"
    cmds:
      - cmd: mkdir -p {{.CPUKEYS_DIR}}
        silent: true
      - ssh-keygen -b 2048 -t rsa -f {{.CPU_HOST_KEY}} -q -N "" <<< y >/dev/null
      - ssh-keygen -b 2048 -t rsa -f {{.CPU_CLIENT_KEY}} -q -N "" <<< y >/dev/null
    status:
      - "[ -f {{.CPU_HOST_KEY}} ]"
      - "[ -f {{.CPU_HOST_KEY}}.pub ]"
      - "[ -f {{.CPU_CLIENT_KEY}} ]"
      - "[ -f {{.CPU_CLIENT_KEY}}.pub ]"
    run: once
    vars:
      CPU_HOST_KEY: "{{.CPUKEYS_DIR}}/ssh_host_rsa_key"
      CPU_CLIENT_KEY: "{{.CPUKEYS_DIR}}/cpu_rsa"

######## checks ########

  # TODO: add config file validation
  check-config:
    preconditions:
      - sh: '[ -f "{{.CONFIG}}" ]'
        msg: |-
          [ERROR] File "{{.CONFIG}}" missing
          Please provide a configuration file or run "task config"
    run: once

  check-disk:
    preconditions:
      - sh: '[ "{{.ST_HOST_CONFIG_LOCATION}}" != "cdrom" ]'
        msg: '[ERROR] disk image does not support ST_HOST_CONFIG_LOCATION="cdrom".'
    run: once

  check-iso:
    preconditions:
      - sh: '[ "{{.ST_BOOT_MODE}}" == "network" ]'
        msg: '[ERROR] ISO image does only support network boot mode'
      - sh: '[ "{{.ST_HOST_CONFIG_LOCATION}}" != "legacy" ]'
        msg: '[ERROR] ISO image does not support ST_HOST_CONFIG_LOCATION="legacy".'
    run: once

######## cleanup ########

  clean:
    desc: Remove all build artifacts
    cmds:
      - "rm -rf out"

  clean-toolchain:
    desc: Remove all go tools
    deps:
      - go:clean

  clean-all:
    desc: Remove all build artifacts, cache and config file
    deps:
      - clean
      - go:clean
    cmds:
      - "rm -rf cache"
      - "rm -rf .task"
      - "rm -f {{.CONFIG}}"
