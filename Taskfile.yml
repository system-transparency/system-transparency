version: '3'

vars:
  GO_ENV: 'GO111MODULE="off" GOPATH="${PWD}/cache/go"'

dotenv:
  - .config

includes:
  go: ./go.yml
  deps: ./deps.yml

output: 'prefixed'

## custom Anchors

preconditions:
  <<: &check-config
    sh: test -f .config
    msg: "Configuration (.config) file missing\nPlease provide a config file or run \"task config\""
  <<: &check-key
    sh: test -f {{.ST_SIGNING_ROOT}}
    msg: "root certificate ({{.ST_SIGNING_ROOT}}) missing\nPlease provide a certificate or run \"task keygen-sign\""

tasks:

  default:
    deps:
      - image

  config:
    desc: Generate default configuration
    sources:
      - contrib/default.config
    generates:
      - .config
    cmds:
      - ./scripts/config.sh -o .config

  # XXX: Does not update toolchain binary!
  # TODO: Force toolchain rebuild for this target only
  # current workaround: task clean-toolchain toolchain
  toolchain:
    desc: Build toolchain
    deps:
      - go:all

######## stboot-installation ########

  image:
    desc: Build target installation option
    # TODO: make target installation option optional
    deps: [image-mbr]

  image-mbr:
    desc: Build MBR bootloader installation option
    deps:
      - mbr-boot
      - data
    sources:
      - out/stboot-installation/data.ext4
      - out/stboot-installation/mbr-bootloader/boot_partition.vfat
    generates:
      - out/stboot-installation/mbr-bootloader/stboot_mbr_installation.img
    cmds:
      - ./stboot-installation/mbr-bootloader/build_image.sh
    preconditions:
      - *check-config

  image-efi:
    desc: Build EFI application installation option
    deps:
      - efi-boot
      - data
    cmds:
      - ./stboot-installation/efi-application/build_image.sh
    preconditions:
      - *check-config

  mbr-boot:
    deps:
      - kernel
      - host-config
      - syslinux
      - syslinux-config
    sources:
      - out/stboot-installation/initramfs-linuxboot.cpio.gz
      - out/stboot-installation/host_configuration.json
      - cache/syslinux/syslinux-6.03/bios/mtools/syslinux
      - out/stboot-installation/mbr-bootloader/syslinux.cfg
    generates:
      - out/stboot-installation/mbr-bootloader/boot_partition.vfat
    cmds:
      - ./stboot-installation/mbr-bootloader/build_boot_filesystem.sh
    preconditions:
      - *check-config

  data:
    sources:
      - out/os-packages
    generates:
      - out/stboot-installation/data_partition.ext4
    cmds:
      - ./stboot-installation/common/build_data_filesystem.sh
    status:
      - ./.task_config.sh data stboot-installation/common/build_data_filesystem.sh
    preconditions:
      - *check-config

  host-config:
    generates:
      - out/stboot-installation/host-configuration.json
    cmds:
      - ./stboot-installation/common/build_host_config.sh
    status:
      - ./.task_config.sh host-config stboot-installation/common/build_host_config.sh
    preconditions:
      - *check-config

  security-config:
    generates:
      - out/stboot-installation/security_configuration.json
    cmds:
      - ./stboot-installation/common/build_security_config.sh
    status:
      - ./.task_config.sh security-config stboot-installation/common/build_security_config.sh
    preconditions:
      - *check-config

  syslinux:
    generates:
      - cache/syslinux/syslinux-6.03/bios/mtools/syslinux
    cmds:
      - ./stboot-installation/mbr-bootloader/fetch_syslinux.sh
        # TODO: integrate into the the script above
      - cp cache/syslinux/syslinux-6.03/efi32/efi/syslinux.efi out/stboot-installation/mbr-bootloader/BOOTIA32.EFI
      - cp cache/syslinux/syslinux-6.03/efi64/efi/syslinux.efi out/stboot-installation/mbr-bootloader/BOOTX64.EFI
    status:
      - test -x cache/syslinux/syslinux-6.03/bios/mtools/syslinux

  syslinux-config:
    generates:
      - out/stboot-installation/mbr-bootloader/syslinux.cfg
    cmds:
      - ./stboot-installation/mbr-bootloader/build_syslinux_config.sh
    status:
      - test -f out/stboot-installation/mbr-bootloader/syslinux.cfg

######## keygen ########

  keygen:
    desc: Generate all example keys
    deps:
      - keygen-sign
      - keygen-cpu

  keygen-sign:
    desc: Generate example sign keys
    deps:
      - go:stmanager
    generates:
      - out/keys/signing_keys/*
    cmds:
      - ./scripts/make_signing_keys.sh -o out/keys/signing_keys/

  keygen-cpu:
    desc: Generate cpu ssh keys for debugging
    generates:
      - out/keys/cpu_keys/*
    cmds:
      - ./scripts/make_cpu_keys.sh -o out/keys/cpu_keys/
    preconditions:
      - *check-config

######## LinuxBoot kernel ########

  kernel:
    desc: Build LinuxBoot kernel
    deps:
      - initramfs
    sources:
      - out/stboot-installation/initramfs-linuxboot.cpio.gz
    generates:
      - out/stboot-installation/linuxboot.vmlinuz
    cmds:
      - make -f modules/linux.mk OUT=out/stboot-installation CACHE=cache
    status:
      - ./.task_config.sh kernel modules/linux.mk
    preconditions:
      - *check-config

  initramfs:
    deps:
      - go:u-root
      - security-config
    sources:
      - out/stboot-installation/security-configuration.json
    generates:
      - out/stboot-installation/initramfs-linuxboot.cpio.gz
    cmds:
      - ./stboot-installation/common/build_initramfs.sh
    preconditions:
      - *check-config
      - *check-key

######## cleanup ########

  clean:
    desc: Remove all build artifacts
    cmds:
      - rm -rf out

  clean-keys:
    desc: Remove all keys
    cmds:
      - rm -rf out/keys

  clean-toolchain:
    desc: Remove all go tools
    deps:
      - go:clean

  clean-os:
    desc: Remove os-packages
    cmds:
      - rm -rf out/os-packages

  clean-all:
    desc: Remove all build artifacts, cache and config file
    deps: [clean]
    cmds:
      - rm -rf cache
      - rm -rf .task
      - rm -f .config
