version: '3'

vars:
  GO_ENV: 'GO111MODULE="off" GOPATH="${PWD}/cache/go" PATH="${GOPATH}/bin:${PATH}"'
  # Config file
  CONFIG: .config
  DEFAULT_CONFIG: contrib/default.config
  # Build Targets
  MBR_IMAGE: out/stboot_mbr_installation.img
  EFI_IMAGE: out/stboot_efi_installation.img
  # Build Artifacts
  DATA_PART: out/artifacts/data_partition.ext4
  MBR_BOOT_PART: out/artifacts/boot_partition.vfat
  EFI_BOOT_PART: out/artifacts/boot_partition.vfat
  KERNEL_FILE: out/artifacts/linuxboot.vmlinuz
  INITRAMFS_FILE: out/artifacts/initramfs-linuxboot.cpio.gz
  INITRAMFS_INCLUDE: contrib/initramfs-includes
  HOST_CONFIG: out/artifacts/host_configuration.json
  SECURITY_CONFIG: out/artifacts/security_configuration.json
  SYSLINUX_CONFIG: out/artifacts/syslinux.cfg
  SYSLINUX_BIN: cache/syslinux/bios/mtools/syslinux
  # Target Directories
  SIGNKEYS_DIR: out/keys/signing_keys/
  CPUKEYS_DIR: out/keys/cpu_keys/
  OS_DIR: out/os-packages/
  SYSLINUX_DIR: cache/syslinux/
  # Scripts
  CONFIG_SCRIPT: ./scripts/config.sh
  MBR_IMAGE_SCRIPT: ./scripts/mbr_image.sh
  EFI_IMAGE_SCRIPT: ./scripts/efi_image.sh
  MBR_BOOT_PART_SCRIPT: ./scripts/mbr_boot_partition.sh
  EFI_BOOT_PART_SCRIPT: ./scripts/efi_boot_partition.sh
  DATA_PART_SCRIPT: ./scripts/data_partition.sh
  INITRAMFS_SCRIPT: ./scripts/initramfs.sh
  HOST_CONFIG_SCRIPT: ./scripts/host_config.sh
  SECURITY_CONFIG_SCRIPT: ./scripts/security_config.sh
  SYSLINUX_BIN_SCRIPT: ./scripts/syslinux.sh
  SYSLINUX_CONFIG_SCRIPT: ./scripts/syslinux_config.sh
  KEYGEN_SIGN_SCRIPT: ./scripts/signing_keys.sh
  KEYGEN_CPU_SCRIPT: ./scripts/cpu_keys.sh
  # make modules
  LINUX_MAKE: modules/linux.mk
  # task helper script
  CONFIG_HELPER: ./.task_config.sh

dotenv:
  - .config

includes:
  go: ./go.yml
  deps: ./deps.yml

output: 'prefixed'

### custom Anchors

preconditions:
  <<: &check-config
    sh: test -f "{{.CONFIG}}"
    msg: "Configuration ({{.CONFIG}}) file missing\nPlease provide a config file or run \"task config\""
  <<: &check-key
    sh: test -f "{{.ST_SIGNING_ROOT}}"
    msg: "root certificate ({{.ST_SIGNING_ROOT}}) missing\nPlease provide a certificate or run \"task keygen-sign\""

###

tasks:

  default:
    deps:
      - image

  config:
    desc: Generate default configuration
    sources:
      - "{{.DEFAULT_CONFIG}}"
    generates:
      - "{{.CONFIG}}"
    cmds:
      - "{{.CONFIG_SCRIPT}} -o {{.CONFIG}}"

  # XXX: Does not update toolchain binary!
  # TODO: Force toolchain rebuild for this target only
  # current workaround: task clean-toolchain toolchain
  toolchain:
    desc: Build toolchain
    deps:
      - go:all

######## stboot-installation ########

  image:
    desc: Build target installation option
    deps:
      - "image-{{.ST_INSTALLATION_OPTION}}"
    preconditions:
      - *check-config

  # dummy target for the case ST_INSTALLATION_OPTION is not defined
  image-:
    preconditions:
      - *check-config
      - sh: "test ! -z $ST_INSTALLATION_OPTION"
        msg: "ST_INSTALLATION_OPTION not defined"

  image-mbr:
    desc: Build MBR bootloader installation option
    deps:
      - mbr-boot-part
      - data-part
    sources:
      - "{{.MBR_BOOT_PART}}"
      - "{{.DATA_PART}}"
    generates:
      - "{{.MBR_IMAGE}}"
    cmds:
      - "{{.MBR_IMAGE_SCRIPT}} --boot {{.MBR_BOOT_PART}} --data {{.DATA_PART}} --syslinux-dir {{.SYSLINUX_DIR}} --output {{.MBR_IMAGE}}"
    status:
      - "{{.CONFIG_HELPER}} image-mbr {{.MBR_IMAGE_SCRIPT}}"
      - "test -f {{.MBR_IMAGE}}"
    preconditions:
      - *check-config

  image-efi:
    desc: Build EFI application installation option
    deps:
      - efi-boot-part
      - data-part
    sources:
      - "{{.EFI_BOOT_PART}}"
      - "{{.DATA_PART}}"
    generates:
      - "{{.EFI_IMAGE}}"
    cmds:
      - "{{.EFI_IMAGE_SCRIPT}} --boot {{.EFI_BOOT_PART}} --data {{.DATA_PART}} --output {{.EFI_IMAGE}}"
    status:
      - "{{.CONFIG_HELPER}} image-efi {{.EFI_IMAGE_SCRIPT}}"
      - "test -f {{.EFI_IMAGE}}"
    preconditions:
      - *check-config

  mbr-boot-part:
    deps:
      - kernel
      - host-config
      - syslinux
      - syslinux-config
    sources:
      - "{{.KERNEL_FILE}}"
      - "{{.HOST_CONFIG}}"
      - "{{.SYSLINUX_CONFIG}}"
    generates:
      - "{{.MBR_BOOT_PART}}"
    cmds:
      - "{{.MBR_BOOT_PART_SCRIPT}} --syslinux-dir {{.SYSLINUX_DIR}} --syslinux-config {{.SYSLINUX_CONFIG}} --host-config {{.HOST_CONFIG}} --kernel {{.KERNEL_FILE}} -o {{.MBR_BOOT_PART}}"
    status:
      - "{{.CONFIG_HELPER}} mbr-boot-part {{.MBR_BOOT_PART_SCRIPT}}"
      - "test -f {{.MBR_BOOT_PART}}"
    preconditions:
      - *check-config

  efi-boot-part:
    deps:
      - kernel
      - host-config
    sources:
      - "{{.INITRAMFS_FILE}}"
      - "{{.HOST_CONFIG}}"
    generates:
      - "{{.EFI_BOOT_PART}}"
    cmds:
      - "{{.EFI_BOOT_PART_SCRIPT}} --host-config {{.HOST_CONFIG}} --kernel {{.KERNEL_FILE}} -o {{.EFI_BOOT_PART}}"
    status:
      - "{{.CONFIG_HELPER}} efi-boot-part {{.EFI_BOOT_PART_SCRIPT}}"
      - "test -f {{.EFI_BOOT_PART}}"
    preconditions:
      - *check-config

  data-part:
    sources:
      - "{{.OS_DIR}}/**"
    generates:
      - "{{.DATA_PART}}"
    cmds:
      - "{{.DATA_PART_SCRIPT}} --ospkg-dir {{.OS_DIR}} -o {{.DATA_PART}}"
    status:
      - "{{.CONFIG_HELPER}} data-part {{.DATA_PART_SCRIPT}}"
      - "test -f {{.DATA_PART}}"
    preconditions:
      - *check-config

  host-config:
    generates:
      - "{{.HOST_CONFIG}}"
    cmds:
      - "{{.HOST_CONFIG_SCRIPT}} -o {{.HOST_CONFIG}}"
    status:
      - "{{.CONFIG_HELPER}} host-config {{.HOST_CONFIG_SCRIPT}}"
      - "test -f {{.HOST_CONFIG}}"
    preconditions:
      - *check-config

  security-config:
    generates:
      - "{{.SECURITY_CONFIG}}"
    cmds:
      - "{{.SECURITY_CONFIG_SCRIPT}} -o {{.SECURITY_CONFIG}}"
    status:
      - "{{.CONFIG_HELPER}} security-config {{.SECURITY_CONFIG_SCRIPT}}"
      - "test -f {{.SECURITY_CONFIG}}"
    preconditions:
      - *check-config

  syslinux:
    generates:
      - "{{.SYSLINUX_BIN}}"
    cmds:
      - "{{.SYSLINUX_BIN_SCRIPT}} -o {{.SYSLINUX_DIR}}"
    status:
      - "test -x {{.SYSLINUX_BIN}}"

  syslinux-config:
    generates:
      - "{{.SYSLINUX_CONFIG}}"
    cmds:
      - "{{.SYSLINUX_CONFIG_SCRIPT}} --kernel $(basename {{.KERNEL_FILE}}) -o {{.SYSLINUX_CONFIG}}"
    status:
      - "test -f {{.SYSLINUX_CONFIG}}"

######## keygen ########

  keygen:
    desc: Generate all example keys
    deps:
      - keygen-sign
      - keygen-cpu

  keygen-sign:
    desc: Generate example sign keys
    deps:
      - go:stmanager
    generates:
      - "{{.SIGNKEYS_DIR}}/*"
    cmds:
      - "{{.GO_ENV}} {{.KEYGEN_SIGN_SCRIPT}} -o {{.SIGNKEYS_DIR}}"
    status:
      - "{{.CONFIG_HELPER}} keygen-sign {{.KEYGEN_SIGN_SCRIPT}}"
      - "test -d {{.SIGNKEYS_DIR}}"

  keygen-cpu:
    desc: Generate cpu ssh keys for debugging
    generates:
      - "{{.CPUKEYS_DIR}}/*"
    cmds:
      - "{{.KEYGEN_CPU_SCRIPT}} -o {{.CPUKEYS_DIR}}"
    status:
      - "{{.CONFIG_HELPER}} keygen-cpu {{.KEYGEN_CPU_SCRIPT}}"
    preconditions:
      - *check-config

######## LinuxBoot kernel ########

  kernel:
    desc: Build LinuxBoot kernel
    deps:
      - initramfs
    sources:
      - "{{.INITRAMFS_FILE}}"
    generates:
      - "{{.KERNEL_FILE}}"
    cmds:
      - "make -f {{.LINUX_MAKE}} KERNEL={{.KERNEL_FILE}}"
    status:
      - "{{.CONFIG_HELPER}} kernel {{.LINUX_MAKE}}"
    preconditions:
      - *check-config

  initramfs:
    deps:
      - go:u-root
      - security-config
    sources:
      - "{{.SECURITY_CONFIG}}"
    generates:
      - "{{.INITRAMFS_FILE}}"
    cmds:
      - "{{.GO_ENV}} {{.INITRAMFS_SCRIPT}} -i {{.INITRAMFS_INCLUDE}} -s {{.SECURITY_CONFIG}} -o {{.INITRAMFS_FILE}}"
    status:
      - "test -f {{.INITRAMFS_FILE}}"
      - "{{.CONFIG_HELPER}} initramfs {{.INITRAMFS_SCRIPT}}"
    preconditions:
      - *check-config
      - *check-key

######## cleanup ########

  clean:
    desc: Remove all build artifacts
    cmds:
      - "rm -rf out"

  clean-keys:
    desc: Remove all keys
    cmds:
      - "rm -rf out/keys"

  clean-toolchain:
    desc: Remove all go tools
    deps:
      - go:clean

  clean-os:
    desc: Remove os-packages
    cmds:
      - "rm -rf out/os-packages"

  clean-all:
    desc: Remove all build artifacts, cache and config file
    deps: [clean]
    cmds:
      - "rm -rf cache"
      - "rm -rf .task"
      - "rm -f .config"
