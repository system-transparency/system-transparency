version: '3'

vars:
  # Build Targets
  ISO: out/stboot.iso
  PROVISO: out/prov.iso
  EFI: out/stboot.uki
  EFI_SIGNED: out/stboot.signed
  # Build Artifacts
  STBOOT_LINUX_KERNEL: out/artifacts/stboot.vmlinuz
  STBOOT_INITRAMFS: out/artifacts/stboot.cpio.gz
  TRUST_POLICY: out/artifacts/trust_policy.json
  HOST_CONFIG: out/artifacts/host_config.json


includes:
  demo: ./tasks/demo.yml
  deps: ./tasks/deps.yml
  go: ./tasks/go.yml
  linux: ./tasks/linux.yml
  initramfs: ./tasks/initramfs.yml
  qemu: ./tasks/qemu.yml
  proviso: ./tasks/provision.yml

output: 'prefixed'

tasks:

  default:
    cmds:
      - task -l
    interactive: true

  fetch:
    desc: Fetch dependencies which require network access
    deps:
      - go:all
      - linux:fetch

  toolchain:
    desc: Build toolchain
    deps:
      - go:update

  iso:
    desc: Build stboot iso image
    deps:
      - task: hostconfig
      - task: linux:kernel-prebuilt # Use pre compiled kernel. Take linux:kernel for compiling.
      - task: initramfs:incl-hostconfig
    sources:
      - "{{.STBOOT_LINUX_KERNEL}}"
      - "{{.STBOOT_INITRAMFS}}"
    generates:
      - "{{.ISO}}"
    cmds:
      - "{{.GOBIN}}/stmgr uki create -format iso -out '{{.ISO}}' -kernel={{.STBOOT_LINUX_KERNEL}} -initramfs={{.STBOOT_INITRAMFS}} -config='{{.HOST_CONFIG}}'"
    run: once

  iso-ospkg:
    desc: Build stboot iso image including an OS package inside the initramfs
    deps:
      - task: hostconfig
      - task: linux:kernel-prebuilt # Use pre compiled kernel. Take linux:kernel for compiling.
      - task: initramfs:incl-ospkg
    sources:
      - "{{.STBOOT_LINUX_KERNEL}}"
      - "{{.STBOOT_INITRAMFS}}"
    generates:
      - "{{.ISO}}"
    cmds:
      - "{{.GOBIN}}/stmgr uki create -format iso -out '{{.ISO}}' -kernel={{.STBOOT_LINUX_KERNEL}} -initramfs={{.STBOOT_INITRAMFS}} -config='{{.HOST_CONFIG}}'"
    run: once


  trustpolicy:
    internal: yes
    deps:
      - task: go:stmgr
    generates:
      - "{{.TRUST_POLICY}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.TRUST_POLICY}})
        silent: true
      - cmd: |-
          {{.GOBIN}}/stmgr trustpolicy check '{{.JSON}}' > {{.TRUST_POLICY}}
    vars:
      JSON: "{{.JSON}}"

  trustpolicy-network:
    desc: Generate trust_policy.json with arbitray data but ospkg_fetch_method set to "network"
    cmds:
      - task: trustpolicy
        vars:
          JSON: |-
            { 
              "ospkg_signature_threshold": 2,
              "ospkg_fetch_method": "network"
            }

  trustpolicy-initramfs:
    desc: Generate trust_policy.json with arbitray data but ospkg_fetch_method set to "initramfs"
    cmds:
      - task: trustpolicy
        vars:
          JSON: |-
            { 
              "ospkg_signature_threshold": 2,
              "ospkg_fetch_method": "initramfs"
            }

  hostconfig:
    internal: yes
    deps:
      - task: go:stmgr
    generates:
      - "{{.HOST_CONFIG}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.HOST_CONFIG}})
        silent: true
      - cmd: |-
          {{.GOBIN}}/stmgr hostconfig check '{{.JSON}}' > {{.HOST_CONFIG}}
    vars:
      JSON: |-
          { 
            "network_mode":"dhcp",
            "host_ip":null,
            "gateway":null,
            "dns":null,
            "network_interface":null,
            "provisioning_urls": ["http://10.0.2.2:8080/os-pkg-example-ubuntu20.json"],
            "identity":null,
            "authentication":null,
            "timestamp":null,
            "network_interfaces": [],
            "bonding_mode": "",
            "bond_name": ""
          }

  netboot:
      desc: Build stboot netboot image
      deps:
        - task: go:stmgr
        - task: go:sthsm
        - task: linux:kernel
        - task: initramfs:standard
      sources:
        - "{{.STBOOT_LINUX_KERNEL}}"
        - "{{.STBOOT_INITRAMFS}}"
      generates:
        - "{{.EFI}}"
      cmds:
        - "{{.GOBIN}}/stmgr uki create -format uki -out '{{.EFI}}' -sbat ./contrib/sbat.csv -kernel={{.STBOOT_LINUX_KERNEL}} -initramfs={{.STBOOT_INITRAMFS}} -config='{{.HOST_CONFIG}}'"
        - "{{.GOBIN}}/mgmt --auth-key-label='Glasklar Admin Key' --password='keins' sign efi --in='{{.EFI}}' --id='0xe37b' --out='{{.EFI_SIGNED}}'"
      run: once

######## cleanup ########

  clean:
    desc: Remove all build artifacts
    cmds:
      - "rm -rf out"

  clean-toolchain:
    desc: Remove all go tools
    deps:
      - go:clean

  clean-all:
    desc: Remove all build artifacts, cache and config file
    deps:
      - clean
      - go:clean
    cmds:
      - "rm -rf cache"
      - "rm -rf .task"


######## somehow outdated, maybe remove it ########
# it builds the stmgr provision hostconfig tool into
# an own iso/initramfs. This GUI tool was never actually used.
# It prompts for hostconfig input and writes it to qemu efivar.

  proviso:
    desc: Build provisioning iso image
    deps:
      - task: linux:kernel-prebuilt # Use pre compiled kernel. Take linux:kernel for compiling.
      - task: proviso:provisioning-initramfs
    sources:
      - ./{{.PROVISIONING_LINUX_IMAGE}}
      - ./{{.PROVISIONING_INITRAMFS}}
    generates:
      - ./{{.PROVISO}}
    cmds:
      - "{{.GOBIN}}/stmgr uki create -format iso -out '{{.ISO}}' -kernel={{.STBOOT_LINUX_KERNEL}} -initramfs={{.PROVISIONING_INITRAMFS}}"
    vars:
      ISO_DIR: cache/proviso
      PROVISO_FAT: ./{{.ISO_DIR}}/provision.fat
      # TODO: Calculate size
      BLOCKS:
        sh: echo $((1<<16))
