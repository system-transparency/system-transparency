version: '3'

vars:
  # All bins we install in GOBIN, for purge by update target
  BINS: "u-root stboot stmgr stprov mgmt stauth"
  UROOT_REPO: github.com/u-root/u-root
  UROOT_VERSION: v0.10.0
  STBOOT_REPO: system-transparency.org/stboot
  STBOOT_VERSION: 4a217262fed276d266e9de059b110c1abaa9fed2
  STMGR_REPO: system-transparency.org/stmgr
  STMGR_VERSION: v0.2.1
  STPROV_REPO: system-transparency.org/stprov/cmd/stprov
  STPROV_VERSION: v0.1.1
  STHSM_REPO: git.glasklar.is/system-transparency/project/sthsm/cmd/mgmt
  STHSM_VERSION: e428dbc
  STAUTH_REPO: git.glasklar.is/system-transparency/core/stauth
  STAUTH_VERSION: 6e1b46d9f57bfb6a6bf770e2fdd591b1294c3d56
  GOBIN: cache/go/bin
  GOPATH:
    sh: echo "$PWD/cache/go"
  GOPREFIX: GOPATH={{.GOPATH}}

tasks:

  # XXX: It is not safe to run "get" and "checkout" task concurrently.
  #      If a repository gets updated during a checkout, an error due to
  #      conflicting git commands may be caused.
  get:
    cmds:
      - "{{.GOPREFIX}} go get -d {{.REPO}}/..."
    env:
      GO111MODULE: off
    label: "get {{.REPO}}"
    preconditions:
      - sh: '[ -n "{{.REPO}}" ]'
        msg: "task bug: REPO not defined"
    run: when_changed
    status:
      - "test -f cache/go/src/{{.REPO}}/.git/config"
    vars:
        REPO: "{{.REPO}}"

  checkout:
    cmds:
      - "git -C cache/go/src/{{.REPO}} fetch --quiet"
      - "git -C cache/go/src/{{.REPO}} checkout --quiet {{.BRANCH}}"
    env:
      GO111MODULE: off
    deps:
      - task: get
        vars:
          REPO: "{{.REPO}}"
    label: "go:checkout {{.REPO}}@{{.BRANCH}}"
    preconditions:
      - sh: '[ -n "{{.REPO}}" ]'
        msg: "task bug: REPO not defined"
      - sh: '[ -n "{{.BRANCH}}" ]'
        msg: "task bug: BRANCH not defined"
    run: when_changed
    status:
      - "test -f cache/go/src/{{.REPO}}/.git/HEAD"
      - "git -C cache/go/src/{{.REPO}} diff --no-patch --exit-code {{.BRANCH}} >/dev/null 2>&1"
    vars:
        REPO: "{{.REPO}}"
        BRANCH: "{{.BRANCH}}"

  install:
    cmds:
      - '{{.GOPREFIX}} go install -ldflags "{{.GO_LDFLAGS}}" {{.PACKAGE}}@{{.VERSION}}'
      # create version file
      - cmd: 'echo "{{.VERSION}}" > {{.GOBIN}}/.{{.NAME}}'
        silent: true
    label: "go:install {{.NAME}}"
    preconditions:
      - sh: '[ -n "{{.NAME}}" ]'
        msg: "task bug: NAME not defined"
      - sh: '[ -n "{{.PACKAGE}}" ]'
        msg: "task bug: PACKAGE not defined"
    run: when_changed
    status:
      - "test -x {{.GOBIN}}/{{.NAME}}"
      # check version file
      - 'grep -q {{.VERSION}} {{.GOBIN}}/.{{.NAME}}'
    env:
      CGO_ENABLED: '{{.CGO_ENABLED}}'
    vars:
      VERSION: '{{default "latest" .VERSION}}'
      GO_LDFLAGS: '{{default "" .GO_LDFLAGS}}'
      CGO_ENABLED: '{{default "" .CGO_ENABLED}}'

  all:
    deps:
      - u-root
      - stmgr
      - stprov
      - sthsm
    # checkout sequentially
    cmds:
      - task: checkout-uroot
      - task: checkout-stboot

  update:
    cmds:
      - "cd {{.GOBIN}} && rm -f {{.BINS}}"
      - task: all
    run: once

  u-root:
    cmds:
      - task: install
        vars:
          NAME: u-root
          PACKAGE: "{{.UROOT_REPO}}"
          VERSION: "{{.UROOT_VERSION}}"
    run: once

  stmgr:
    cmds:
      - task: install
        vars:
          NAME: stmgr
          PACKAGE: "{{.STMGR_REPO}}"
          VERSION: "{{.STMGR_VERSION}}"
    run: once

  stprov:
    cmds:
      - task: install
        vars:
          NAME: stprov
          PACKAGE: "{{.STPROV_REPO}}"
          VERSION: "{{.STPROV_VERSION}}"
    run: once

  sthsm:
    cmds:
      - task: install
        vars:
          NAME: sthsm
          PACKAGE: "{{.STHSM_REPO}}"
          VERSION: "{{.STHSM_VERSION}}"
    run: once

  stauth:
    cmds:
      - task: install
        vars:
          NAME: stauth
          PACKAGE: "{{.STAUTH_REPO}}"
          VERSION: "{{.STAUTH_VERSION}}"
          CGO_ENABLED: "0"
    run: once

  debos:
    cmds:
      - '{{.GOPREFIX}} go get github.com/go-debos/debos/cmd/debos'
    deps:
      # libglib2.0-dev
      - task: :deps:check-pkg
        vars: {PKG: "glib-2.0"}
      - task: :deps:check-pkg
        vars: {PKG: "gobject-2.0"}
      # libostree-dev
      - task: :deps:check-pkg
        vars: {PKG: "ostree-1"}
      - task: get
        vars:
          REPO: github.com/go-debos/debos
    env:
      GO111MODULE: off
    run: once
    status:
      - "test -x cache/go/bin/debos"

  # Fetch/checkout Repos into GOPATH for u-root build runtime

  checkout-uroot:
    cmds:
      - task: :go:checkout
        vars:
          REPO: "{{.UROOT_REPO}}"
          BRANCH: "{{.UROOT_VERSION}}"
    run: once

  checkout-stboot:
    cmds:
      - task: :go:checkout
        vars:
          REPO: "{{.STBOOT_REPO}}"
          BRANCH: "{{.STBOOT_VERSION}}"
    run: once
  
  clean:
    cmds:
      - "[ ! -d cache/go ] || chmod +w -R cache/go"
      - rm -rf cache/go
    run: once
