version: '3'

tasks:
  keygen:
    desc: Generate example signing keys
    deps:
      - :check-config
      - :go:stmgr
    generates:
      - "{{.DEMO_KEY_DIR}}/root.*"
      - "{{.DEMO_KEY_DIR}}/signing-key-*"
    cmds:
      - cmd: mkdir -p {{.DEMO_KEY_DIR}}
        silent: true
      - cmd: >
             CMD="{{.GOBIN}}/stmgr keygen certificate -isCA
             -certOut="{{.DEMO_KEY_DIR}}/root.cert"
             -keyOut="{{.DEMO_KEY_DIR}}/root.key"";
             echo $CMD;
             $CMD;
        silent: true
      - cmd: >
             for I in {1..{{.ST_NUM_SIGNATURES}}}; do
             CMD="{{.GOBIN}}/stmgr keygen certificate -rootCert={{.DEMO_KEY_DIR}}/root.cert
             -rootKey={{.DEMO_KEY_DIR}}/root.key
             -certOut={{.DEMO_KEY_DIR}}/signing-key-${I}.cert
             -keyOut={{.DEMO_KEY_DIR}}/signing-key-${I}.key";
             echo $CMD;
             $CMD;
             done
        silent: true
    status:
      - "[ -f {{.DEMO_KEY_DIR}}/root.key ]"
      - "[ -f {{.DEMO_KEY_DIR}}/root.cert ]"
      - "for i in {1..{{.ST_NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.key ]]; done"
      - "for i in {1..{{.ST_NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.cert ]]; done"
    preconditions:
      - sh: '[ "{{.ST_SIGNING_ROOT}}" = "{{.DEMO_KEY_DIR}}/root.cert" ]'
        msg: '[ERROR] Set ST_SIGNING_ROOT="{{.DEMO_KEY_DIR}}/root.cert" to generate example signing keys'
    vars:
      DEMO_KEY_DIR: out/keys/example_keys

  ospkg:
    desc: "Build demo OS Package"
    deps:
      - :check-config
      - :go:stmgr
      - ubuntu
    sources:
      - "{{.SIGNKEYS_DIR}}/signing-key-*}}"
    generates:
      - "{{.ST_LOCAL_OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
    cmds:
      - "mkdir -p {{.ST_LOCAL_OSPKG_DIR}}"
      - "{{.GOBIN}}/stmgr ospkg create -out '{{.ST_LOCAL_OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}' -label='{{.LABEL}}' -kernel={{.KERNEL}} -initramfs={{.INITRD}} -cmdline='{{.CMDLINE}}' -url=http://10.0.2.2:8080/os-pkg-example-ubuntu20.zip"
      - "for i in {1..{{.ST_NUM_SIGNATURES}}}; do {{.GOBIN}}/stmgr ospkg sign -key={{.SIGNKEYS_DIR}}/signing-key-$i.key -cert={{.SIGNKEYS_DIR}}/signing-key-$i.cert -ospkg {{.ST_LOCAL_OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}; done"
      - "echo {{.EXAMPLE_OSPKG}} > {{.ST_LOCAL_OSPKG_DIR}}/boot_order"
    status:
      - "test -f {{.ST_LOCAL_OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
      - "test -f {{.ST_LOCAL_OSPKG_DIR}}/boot_order"
    preconditions:
      - sh: '[[ -f /etc/os-release ]] && sed -n "s/^ID.*=\(.*\)$/\1/p" /etc/os-release|grep -q debian'
        msg: "[ERROR] OS is not debian based"
      - sh: '[ ! -z "{{.ST_LOCAL_OSPKG_DIR}}" ] && ! (find {{.ST_LOCAL_OSPKG_DIR}} -name \*.zip | grep -v {{.EXAMPLE_OSPKG}} | read)'
        msg: "[ERROR] Path \"{{.ST_LOCAL_OSPKG_DIR}}\" already contain OS packages. Remove them to create an example OS Package"
      - sh: "for i in {1..{{.ST_NUM_SIGNATURES}}}; do [[ -f {{.SIGNKEYS_DIR}}/signing-key-$i.key ]]; done"
        msg: "[ERROR] Missing sign key. Run \"task demo:keygen\" to generate examples keys and certificates"
      - sh: "for i in {1..{{.ST_NUM_SIGNATURES}}}; do [[ -f {{.SIGNKEYS_DIR}}/signing-key-$i.cert ]]; done"
        msg: "[ERROR] Missing sign certificate. Run \"task demo:keygen\" to generate examples keys and certificates"
    vars:
      EXAMPLE_OSPKG: "os-pkg-example-ubuntu20.zip"
      LABEL: System Transparency Test OS
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
      CMDLINE: console=tty0 console=ttyS0,115200n8 rw rdinit=/lib/systemd/systemd
      SIGNKEYS_DIR:
        sh: "dirname {{.ST_SIGNING_ROOT}} 2>/dev/null || true"

  server:
    desc: Run http server to serve ospkgs on port {{.PORT}}
    deps:
    - task: :deps:check-cmd
      vars: {CMD: "python3"}
    cmds:
      - cd {{.ST_LOCAL_OSPKG_DIR}}; python3 -m http.server {{.PORT}}
    preconditions:
      - sh: find {{.ST_LOCAL_OSPKG_DIR}} -name \*.zip | read
        msg: |-
          [ERROR] Path "{{.ST_LOCAL_OSPKG_DIR}}" does not contain any OS packages
          Run "task demo:ospkg" to generate an example OS Package
    vars:
      PORT: 8080

  ubuntu:
    deps:
      - :go:debos
      - task: :deps:check-cmd
        vars: {CMD: "debootstrap"}
      - task: :deps:check-cmd
        vars: {CMD: "systemd-nspawn"}
    cmds:
      - "mkdir -p cache/debos"
      - "{{.SUDO}} cache/go/bin/debos --artifactdir=cache/debos --template-var=suite:focal contrib/debos/ubuntu.yaml"
      - 'if [ ! -z "{{.SUDO}}" ];then {{.SUDO}} chown $(id -u):$(id -g) {{.KERNEL}} {{.INITRD}};fi'
    status:
      - "test -f {{.KERNEL}}"
      - "test -f {{.INITRD}}"
    preconditions:
      - sh: "[ $(id -u) -eq 0 ] || [ -w /dev/kvm ] || command -v sudo 2>/dev/null"
        msg: "[ERROR] root privileges required when kvm virtualization is not available"
    vars:
      SUDO:
        sh: "[ $(id -u) -eq 0 ] || [ -w /dev/kvm ] || echo sudo"
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
