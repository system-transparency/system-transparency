version: '3'

vars:
  OSPKG_DIR: "out/ospkgs"
  NUM_SIGNATURES: 2
  DEMO_KEY_DIR: out/keys/example_keys
  STPROV_INITRAMFS: out/artifacts/stprov.cpio.gz
  STAUTH: "out/stauth"
  EXAMPLE_OS_INITRD: "https://git.glasklar.is/system-transparency/core/example-os/-/package_files/5/download"
  EXAMPLE_OS_KERNEL: "https://git.glasklar.is/system-transparency/core/example-os/-/package_files/6/download"

tasks:
  keygen:
    desc: Generate example signing keys
    deps:
      - :go:stmgr
    generates:
      - "{{.DEMO_KEY_DIR}}/root.*"
      - "{{.DEMO_KEY_DIR}}/signing-key-*"
    cmds:
      - cmd: mkdir -p {{.DEMO_KEY_DIR}}
        silent: true
      - cmd: >
             CMD="{{.GOBIN}}/stmgr keygen certificate -isCA
             -certOut="{{.DEMO_KEY_DIR}}/root.cert"
             -keyOut="{{.DEMO_KEY_DIR}}/root.key"";
             echo $CMD;
             $CMD;
        silent: true
      - cmd: >
             for I in {1..{{.NUM_SIGNATURES}}}; do
             CMD="{{.GOBIN}}/stmgr keygen certificate -rootCert={{.DEMO_KEY_DIR}}/root.cert
             -rootKey={{.DEMO_KEY_DIR}}/root.key
             -certOut={{.DEMO_KEY_DIR}}/signing-key-${I}.cert
             -keyOut={{.DEMO_KEY_DIR}}/signing-key-${I}.key";
             echo $CMD;
             $CMD;
             done
        silent: true
    status:
      - "[ -f {{.DEMO_KEY_DIR}}/root.key ]"
      - "[ -f {{.DEMO_KEY_DIR}}/root.cert ]"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.key ]]; done"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.cert ]]; done"

  ospkg:
    desc: "Build demo OS Package"
    deps:
      - :go:stmgr
      - stauth
      - keygen
    sources:
      - "{{.DEMO_KEY_DIR}}/signing-key-*}}"
    generates:
      - "{{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
    cmds:
      - task: ubuntu-prebuilt
      - "mkdir -p {{.OSPKG_DIR}}"
      - "{{.GOBIN}}/stmgr ospkg create -out '{{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}' -label='{{.LABEL}}' -kernel={{.KERNEL}} -initramfs={{.INITRD}} -cmdline='{{.CMDLINE}}' -url=http://10.0.2.2:8080/os-pkg-example-ubuntu20.zip"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do {{.GOBIN}}/stmgr ospkg sign -key={{.DEMO_KEY_DIR}}/signing-key-$i.key -cert={{.DEMO_KEY_DIR}}/signing-key-$i.cert -ospkg {{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}; done"
    status:
      - "test -f {{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
    vars:
      EXAMPLE_OSPKG: "os-pkg-example-ubuntu20.zip"
      LABEL: System Transparency Test OS
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
      CMDLINE: console=tty0 console=ttyS0,115200n8 rw rdinit=/lib/systemd/systemd

  initramfs-stprov:
    desc: "Build stprov initramfs"
    deps:
      - :go:stprov
      - :go:u-root
    sources:
      - ./cache/go/bin/stmgr
    generates:
      - "{{.STPROV_INITRAMFS}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.STPROV_INITRAMFS}})
        silent: true
      - >
        if [ -d ./cache/u-root ] ;
        then (cd ./cache/u-root && git checkout {{.UROOT_VERSION}}) ;
        else (cd ./cache && git clone https://github.com/u-root/u-root -b {{.UROOT_VERSION}}) ;
        fi
      - >
        {{.GOPREFIX}} {{.GOBIN}}/u-root -build=bb -uinitcmd="/bin/stprov help"
        -uroot-source ./cache/u-root
        -o {{.INITRAMFS}} {{.FILES_ARGS}} core
      - gzip -kf {{.INITRAMFS}}
    preconditions:
      - sh: '[ -n "{{.INITRAMFS}}" ]'
        msg: "task bug: INITRAMFS not defined"
    run: once
    vars:
      INITRAMFS:
        sh: echo {{.STPROV_INITRAMFS}} | sed -e 's/\.gz//'
      UROOT_VERSION:
        sh: go list -m -f '{''{.Version}}' github.com/u-root/u-root
      FILES: >-
        cache/go/bin/stprov:bin/stprov
      FILES_ARGS:
        sh: for f in {{.FILES}}; do echo -n "-files $f"; done

  ospkg-stprov:
    desc: "Build stprov OS Package"
    deps:
      - :go:stmgr
      - keygen
      - initramfs-stprov
    sources:
      - "{{.DEMO_KEY_DIR}}/signing-key-*}}"
    generates:
      - "{{.OSPKG_DIR}}/{{.STPROV_OSPKG}}"
    cmds:
      - "mkdir -p {{.OSPKG_DIR}}"
      - "{{.GOBIN}}/stmgr ospkg create -out '{{.OSPKG_DIR}}/{{.STPROV_OSPKG}}' -label='{{.LABEL}}' -kernel={{.KERNEL}} -initramfs={{.INITRD}} -cmdline='{{.CMDLINE}}' -url=http://10.0.2.2:8080/os-pkg-example-ubuntu20.zip"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do {{.GOBIN}}/stmgr ospkg sign -key={{.DEMO_KEY_DIR}}/signing-key-$i.key -cert={{.DEMO_KEY_DIR}}/signing-key-$i.cert -ospkg {{.OSPKG_DIR}}/{{.STPROV_OSPKG}}; done"
    status:
      - "test -f {{.OSPKG_DIR}}/{{.STPROV_OSPKG}}"
    preconditions: # may be removed
      - sh: '[[ -f {{.KERNEL}} ]] && [[ -f {{.INITRD}} ]]'
        msg: |-
          [MISSING FILES] To create an OS package, you need an OS-kernel and packed OS-userland at this location:
          - {{.KERNEL}} 
          - {{.INITRD}} 
          
          Choose!
          1) Provide this files on your own
          2) run "task initramfs-stprov" to build them from scratch via debos (experimental)
          3) run "task initramfs-stprov" to download pre-built files

          Afterwards, run this task again.
    vars:
      STPROV_OSPKG: "stprov.zip"
      LABEL: Provisioning Tool
      KERNEL: "{{.STBOOT_LINUX_KERNEL}}"
      INITRD: "{{.STPROV_INITRAMFS}}"
      CMDLINE: console=ttyS0,115200n8

  stauth:
    deps:
      - :go:stauth
    cmds:
      - |
        mkdir -p "$(dirname {{.STAUTH}})"
        cp "{{.GOBIN}}/stauth" "{{.STAUTH}}"
    generates:
      - "{{.STAUTH}}"

  start-services:
    desc: Start http server to serve ospkgs and the TPM simulator
    deps:
      - task: :deps:check-cmd
        vars: {CMD: "supervisord"}
      - task: :deps:check-cmd
        vars: {CMD: "supervisorctl"}
      - task: :deps:check-cmd
        vars: {CMD: "swtpm"}
    status:
      - |
        supervisorctl -c contrib/services/supervisord.conf -s unix:///tmp/stauth-demo-supervisor.sock status
    cmds:
      - |
        supervisord -c contrib/services/supervisord.conf
        while [ ! -e /tmp/stauth-demo-swtpm.sock ]
        do
          supervisorctl -c contrib/services/supervisord.conf -s unix:///tmp/stauth-demo-supervisor.sock status
        done
    env:
      PORT: 8080
      OSPKG_DIR: "{{.OSPKG_DIR}}"
    preconditions:
      - sh: find {{.OSPKG_DIR}} -name \*.zip | read
        msg: |-
          [ERROR] Path "{{.OSPKG_DIR}}" does not contain any OS packages
          Run "task demo:ospkg" to generate an example OS Package

  stop-services:
    desc: Stop http server and the TPM simulator
    deps:
      - task: :deps:check-cmd
        vars: {CMD: "supervisorctl"}
    status:
      - |
        ! supervisorctl -c contrib/services/supervisord.conf -s unix:///tmp/stauth-demo-supervisor.sock status
    cmds:
      - |
        supervisorctl -c contrib/services/supervisord.conf -s unix:///tmp/stauth-demo-supervisor.sock shutdown

  ubuntu-prebuilt:
    cmds:
      - "mkdir -p cache/debos"
      - "curl -L -o {{.INITRD}} {{.EXAMPLE_OS_INITRD}}"
      - "curl -L -o {{.KERNEL}} {{.EXAMPLE_OS_KERNEL}}"
    status:
      - "test -f {{.KERNEL}}"
      - "test -f {{.INITRD}}"
    vars:
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
