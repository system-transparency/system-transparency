version: '3'

vars:
  OSPKG_DIR: "out/ospkgs"
  NUM_SIGNATURES: 2
  DEMO_KEY_DIR: out/keys/example_keys
  STPROV_INITRAMFS: out/artifacts/stprov.cpio.gz

tasks:
  keygen:
    desc: Generate example signing keys
    deps:
      - :go:stmgr
    generates:
      - "{{.DEMO_KEY_DIR}}/root.*"
      - "{{.DEMO_KEY_DIR}}/signing-key-*"
    cmds:
      - cmd: mkdir -p {{.DEMO_KEY_DIR}}
        silent: true
      - cmd: >
             CMD="{{.GOBIN}}/stmgr keygen certificate -isCA
             -certOut="{{.DEMO_KEY_DIR}}/root.cert"
             -keyOut="{{.DEMO_KEY_DIR}}/root.key"";
             echo $CMD;
             $CMD;
        silent: true
      - cmd: >
             for I in {1..{{.NUM_SIGNATURES}}}; do
             CMD="{{.GOBIN}}/stmgr keygen certificate -rootCert={{.DEMO_KEY_DIR}}/root.cert
             -rootKey={{.DEMO_KEY_DIR}}/root.key
             -certOut={{.DEMO_KEY_DIR}}/signing-key-${I}.cert
             -keyOut={{.DEMO_KEY_DIR}}/signing-key-${I}.key";
             echo $CMD;
             $CMD;
             done
        silent: true
    status:
      - "[ -f {{.DEMO_KEY_DIR}}/root.key ]"
      - "[ -f {{.DEMO_KEY_DIR}}/root.cert ]"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.key ]]; done"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do [[ -f {{.DEMO_KEY_DIR}}/signing-key-$i.cert ]]; done"

  ospkg:
    desc: "Build demo OS Package"
    deps:
      - :go:stmgr
      - keygen
    sources:
      - "{{.DEMO_KEY_DIR}}/signing-key-*}}"
    generates:
      - "{{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
    cmds:
      - task: ubuntu-prebuilt #use ubuntu for compiling ubuntu artifacts
      - "mkdir -p {{.OSPKG_DIR}}"
      - "{{.GOBIN}}/stmgr ospkg create -out '{{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}' -label='{{.LABEL}}' -kernel={{.KERNEL}} -initramfs={{.INITRD}} -cmdline='{{.CMDLINE}}' -url=http://10.0.2.2:8080/os-pkg-example-ubuntu20.zip"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do {{.GOBIN}}/stmgr ospkg sign -key={{.DEMO_KEY_DIR}}/signing-key-$i.key -cert={{.DEMO_KEY_DIR}}/signing-key-$i.cert -ospkg {{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}; done"
    status:
      - "test -f {{.OSPKG_DIR}}/{{.EXAMPLE_OSPKG}}"
    vars:
      EXAMPLE_OSPKG: "os-pkg-example-ubuntu20.zip"
      LABEL: System Transparency Test OS
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
      CMDLINE: console=tty0 console=ttyS0,115200n8 rw rdinit=/lib/systemd/systemd

  initramfs-stprov:
    desc: "Build stprov initramfs"
    deps:
      - :go:stprov
      - :go:u-root
      - :go:checkout-uroot
    sources:
      - ./cache/go/bin/stmgr
    generates:
      - "{{.STPROV_INITRAMFS}}"
    cmds:
      - cmd: mkdir -p $(dirname {{.STPROV_INITRAMFS}})
        silent: true
      - >
        {{.GOPREFIX}} {{.GOBIN}}/u-root -build=bb -uinitcmd="/bin/stprov help"
        -uroot-source ./cache/go/src/{{.UROOT_REPO}}
        -o {{.INITRAMFS}} {{.FILES_ARGS}} core
      - gzip -kf {{.INITRAMFS}}
    env:
      GO111MODULE: off
    preconditions:
      - sh: '[ -n "{{.INITRAMFS}}" ]'
        msg: "task bug: INITRAMFS not defined"
    run: once
    vars:
      INITRAMFS:
        sh: echo {{.STPROV_INITRAMFS}} | sed -e 's/\.gz//'
      FILES: >-
        cache/go/bin/stprov:/bin/stprov
      FILES_ARGS:
        sh: for f in {{.FILES}}; do echo -n "-files $f"; done

  ospkg-stprov:
    desc: "Build stprov OS Package"
    deps:
      - :go:stmgr
      - keygen
      - initramfs-stprov
    sources:
      - "{{.DEMO_KEY_DIR}}/signing-key-*}}"
    generates:
      - "{{.OSPKG_DIR}}/{{.STPROV_OSPKG}}"
    cmds:
      - "mkdir -p {{.OSPKG_DIR}}"
      - "{{.GOBIN}}/stmgr ospkg create -out '{{.OSPKG_DIR}}/{{.STPROV_OSPKG}}' -label='{{.LABEL}}' -kernel={{.KERNEL}} -initramfs={{.INITRD}} -cmdline='{{.CMDLINE}}' -url=http://10.0.2.2:8080/os-pkg-example-ubuntu20.zip"
      - "for i in {1..{{.NUM_SIGNATURES}}}; do {{.GOBIN}}/stmgr ospkg sign -key={{.DEMO_KEY_DIR}}/signing-key-$i.key -cert={{.DEMO_KEY_DIR}}/signing-key-$i.cert -ospkg {{.OSPKG_DIR}}/{{.STPROV_OSPKG}}; done"
    status:
      - "test -f {{.OSPKG_DIR}}/{{.STPROV_OSPKG}}"
    preconditions: # may be removed
      - sh: '[[ -f {{.KERNEL}} ]] && [[ -f {{.INITRD}} ]]'
        msg: |-
          [MISSING FILES] To create an OS package, you need an OS-kernel and packed OS-userland at this location:
          - {{.KERNEL}} 
          - {{.INITRD}} 
          
          Choose!
          1) Provide this files on your own
          2) run "task initramfs-stprov" to build them from scratch via debos (experimental)
          3) run "task initramfs-stprov" to download pre-built files

          Afterwards, run this task again.
    vars:
      STPROV_OSPKG: "stprov.zip"
      LABEL: Provisioning Tool
      KERNEL: "{{.STBOOT_LINUX_KERNEL}}"
      INITRD: "{{.STPROV_INITRAMFS}}"
      CMDLINE: console=ttyS0,115200n8

  server:
    desc: Run http server to serve ospkgs on port {{.PORT}}
    deps:
    - task: :deps:check-cmd
      vars: {CMD: "python3"}
    cmds:
      - cd {{.OSPKG_DIR}}; python3 -m http.server {{.PORT}}
    preconditions:
      - sh: find {{.OSPKG_DIR}} -name \*.zip | read
        msg: |-
          [ERROR] Path "{{.OSPKG_DIR}}" does not contain any OS packages
          Run "task demo:ospkg" to generate an example OS Package
    vars:
      PORT: 8080

  ubuntu:
    cmds:
      - task: :go:debos
      - task: :deps:check-cmd
        vars: {CMD: "debootstrap"}
      - task: :deps:check-cmd
        vars: {CMD: "systemd-nspawn"}
      - "mkdir -p cache/debos"
      - "{{.SUDO}} cache/go/bin/debos --artifactdir=cache/debos --template-var=suite:focal contrib/debos/ubuntu.yaml"
      - 'if [ ! -z "{{.SUDO}}" ];then {{.SUDO}} chown $(id -u):$(id -g) {{.KERNEL}} {{.INITRD}};fi'
    status:
      - "test -f {{.KERNEL}}"
      - "test -f {{.INITRD}}"
    preconditions:
      - sh: '[[ -f /etc/os-release ]] && sed -n "s/^ID.*=\(.*\)$/\1/p" /etc/os-release|grep -q debian'
        msg: "[ERROR] OS is not debian based"
      - sh: "[ $(id -u) -eq 0 ] || [ -w /dev/kvm ] || command -v sudo 2>/dev/null"
        msg: "[ERROR] root privileges required when kvm virtualization is not available"
    vars:
      SUDO:
        sh: "[ $(id -u) -eq 0 ] || [ -w /dev/kvm ] || echo sudo"
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz

  ubuntu-prebuilt:
    cmds:
      - "mkdir -p cache/debos"
      - "curl -L -o {{.INITRD}} https://github.com/system-transparency/example-os/releases/download/v0.1/ubuntu-focal-amd64.cpio.gz"
      - "curl -L -o {{.KERNEL}} https://github.com/system-transparency/example-os/releases/download/v0.1/ubuntu-focal-amd64.vmlinuz"
    status:
      - "test -f {{.KERNEL}}"
      - "test -f {{.INITRD}}"
    vars:
      KERNEL: cache/debos/ubuntu-focal-amd64.vmlinuz
      INITRD: cache/debos/ubuntu-focal-amd64.cpio.gz
