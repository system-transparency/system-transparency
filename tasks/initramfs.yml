version: '3'


tasks:
  
  build:
    internal: yes
    deps:
      - :go:stboot
    cmds:
      - cmd: echo "Building uncompressed initramfs via cpio with stboot as init process"
        silent: yes
      - cmd: echo "Including files:"
        silent: yes
      - cmd: for f in {{.FILES}}; do echo "- $f" ; done
        silent: yes
      - cmd: |
          set -e
          rm -rf out/tmp-initramfs
          mkdir -p out/tmp-initramfs
          for f in {{.FILES}} ; do
          from=$(echo "$f" |sed s/:.*//)
          to=$(echo "$f" |sed s/.*://)
          mkdir -p out/tmp-initramfs/$(dirname "$to")
          ln -sr "$from" "out/tmp-initramfs/$to"
          done
          ln -sr "bin/stboot" "out/tmp-initramfs/init"
          (cd out/tmp-initramfs && find . | cpio -o -H newc -R 0:0 --dereference) > {{.OUTPUT}}.tmp
          mv {{.OUTPUT}}.tmp {{.OUTPUT}}
    preconditions:
      - sh: "[ -n \"{{.OUTPUT}}\" ]"
        msg: "task bug: OUTPUT not defined"
      - sh: "[ -n \"{{.FILES}}\" ]"
        msg: "task bug: FILES not defined"
    vars:
      FILES: "{{.FILES}}"
      OUTPUT: "{{.OUTPUT}}"


  generic:
    internal: yes
    cmds:
      - task: build
        vars:
          OUTPUT: "{{.VARIANT_OUT}}"
          FILES: "{{.FILES}}"
      - gzip -kf {{.VARIANT_OUT}}
      - mv {{.VARIANT_OUT}}.gz {{.STBOOT_INITRAMFS}}
    preconditions:
      - sh: >-
          [ -f "{{.SIGNING_ROOT}}" ]
        msg: |-
          [ERROR] root certificate ({{.SIGNING_ROOT}}) missing.
          Provide a certificate or run "task demo:keygen".
      - sh: >-
          [ -f "{{.HTTPS_ROOT}}" ]
        msg: |-
          [ERROR] HTTPS certificate ({{.HTTPS_ROOT}}) missing.
    vars:
      HTTPS_ROOT: contrib/initramfs-includes/isrgrootx1.pem
      SIGNING_ROOT: out/keys/example_keys/root.cert
      VARIANT_OUT: out/artifacts/{{.VARIANT}}.cpio
      VARIANT: "{{.VARIANT}}"
      FILES: >-
        {{.SIGNING_ROOT}}:etc/trust_policy/ospkg_signing_root.pem
        {{.HTTPS_ROOT}}:etc/trust_policy/tls_roots.pem
        {{.FILES}}


  standard:
    desc: "Build an initramfs with stboot as init process"
    deps:
      - task: :trustpolicy-network
    cmds:
      - task: generic
        vars:
          VARIANT: "{{.TASK}}"
          FILES: "{{.FILES}}"
    vars: 
      FILES: >-
        {{.TRUST_POLICY}}:etc/trust_policy/trust_policy.json

  incl-hostconfig:
    desc: "Build an initramfs with stboot as init process"
    deps:
      - task: :trustpolicy-network
      - task: :hostconfig-network
    cmds:
      - task: generic
        vars:
          VARIANT: "{{.TASK}}"
          FILES: "{{.FILES}}"
    vars: 
      FILES: >-
        {{.HOST_CONFIG}}:etc/host_configuration.json
        {{.TRUST_POLICY}}:etc/trust_policy/trust_policy.json


  incl-ospkg:
    desc: "Build an initramfs with stboot as init process including an OS package"
    deps:
      - task: :trustpolicy-initramfs
      - task: :hostconfig-initramfs
    cmds:
      - task: generic
        vars:
          VARIANT: "{{.TASK}}"
          FILES: "{{.FILES}}"
    preconditions:
      - sh: >-
          [ -f "{{.OSPKG_DESCRIPTOR}}" ] && [ -f "{{.OSPKG_ARCHIVE}}" ]
        msg: |-
          [ERROR] Missing OS package artifacts:
          - {{.OSPKG_ARCHIVE}}  
          - {{.OSPKG_DESCRIPTOR}}
          Either provide them manually or run before 'task demo:ospkg'
    vars:
      OSPKG_DESCRIPTOR: "{{.OSPKG_DIR}}/os-pkg-example-ubuntu20.json"
      OSPKG_ARCHIVE: "{{.OSPKG_DIR}}/os-pkg-example-ubuntu20.zip"
      FILES: >-
        {{.HOST_CONFIG}}:etc/host_configuration.json
        {{.TRUST_POLICY}}:etc/trust_policy/trust_policy.json
        {{.OSPKG_DESCRIPTOR}}:ospkg/ospkg.json
        {{.OSPKG_ARCHIVE}}:ospkg/ospkg.zip

  provision:
    desc: "Build an initramfs with stboot as init process including stprov as OS package"
    deps:
      - task: :trustpolicy-network
      - task: :demo:ospkg-stprov
    cmds:
      - task: generic
        vars:
          VARIANT: "{{.TASK}}"
          FILES: "{{.FILES}}"
    preconditions: # may be removed
      - sh: >-
          [ -f "{{.STPROV_OSPKG_DESCRIPTOR}}" ] && [ -f "{{.STPROV_OSPKG_ARCHIVE}}" ]
        msg: |-
          [ERROR] Missing OS package artifacts:
          - {{.STPROV_OSPKG_ARCHIVE}}  
          - {{.STPROV_OSPKG_DESCRIPTOR}}
          Either provide them manually or run before 'task demo:ospkg-stprov'
    vars:
      STPROV_OSPKG_DESCRIPTOR: "{{.OSPKG_DIR}}/stprov.json"
      STPROV_OSPKG_ARCHIVE: "{{.OSPKG_DIR}}/stprov.zip"
      FILES: >-
        {{.TRUST_POLICY}}:etc/trust_policy/trust_policy.json
        {{.STPROV_OSPKG_DESCRIPTOR}}:ospkg/provision.json
        {{.STPROV_OSPKG_ARCHIVE}}:ospkg/provision.zip



# TODO:
# To cover both paths of hostconfig autodetect:
#
# - make a `initramfs-incl-host-config` including
#   {{.HOST_CONFIG}}:etc/host_configuration.json
#
# - write something in qemu: to preset the OVMF_VARS.fd with host config
